{
  "docs": [
  {
      "_id": "_design/employee_timelog",
      "views": {
        "by_time": {
          "map": "function (doc) {\n  if(doc.hasOwnProperty('entityTypeName') && doc.entityTypeName == 'EmployeeTimestamp') {\n    var time = new Date(doc.time);\n    var timeString = [time.getFullYear(), time.getMonth() + 1, time.getDate()].join('-');\n    emit(timeString, doc);\n  }\n}"
        }
      },
      "language": "javascript"
},{
  "_id": "_design/inventory",
  "views": {
    "stock_per_store": {
      "map": "function (doc) {\r\n  if(doc.entityTypeName == 'StockHistory') {\r\n    emit([ doc.productId, doc.storeId], doc.value );\r\n  }\r\n}",
      "reduce": "function (keys, values, rereduce) {\r\n\tfunction sumField(arr, field) {\r\n\t\treturn arr.reduce(function (prev, cur) {\r\n\t\t\treturn prev + cur[field];\r\n\t\t},\r\n\t\t0);\r\n\t}\r\n\tif (rereduce) {\r\n\t\treturn {\r\n\t\t\tpurchase: sumField(values, \"Purchase\"),\r\n\t\t\tinitialValue: sumField(values, \"InitialValue\"),\r\n\t\t\tnewStock: sumField(values, \"NewStock\"),\r\n\t\t\treturned: sumField(values, \"Return\"),\r\n\t\t\ttransfer: sumField(values, \"Transfer\"),\r\n\t\t\tadjustment: sumField(values, \"Adjustment\"),\r\n\t\t\tinternalUse: sumField(values, \"InternalUse\"),\r\n\t\t\tdamaged: sumField(values, \"Damaged\"),\r\n\t\t\toutOfDate: sumField(values, \"OutOfDate\"),\r\n\t\t\tother: sumField(values, \"Other\")\r\n\t\t};\r\n\r\n\t}else {\r\n\t\tvar result = {\r\n\t\t\tPurchase: 0,\r\n\t\t\tInitialValue: 0,\r\n\t\t\tNewStock: 0,\r\n\t\t\tReturn: 0,\r\n\t\t\tTransfer: 0,\r\n\t\t\tAdjustment: 0,\r\n\t\t\tInternalUse: 0,\r\n\t\t\tDamaged: 0,\r\n\t\t\tOutOfDate: 0,\r\n\t\t\tOther: 0\r\n\t\t}\r\n\t\tif (values) {\r\n\t\t\tfor (var idx in values) {\r\n\t\t\tvar value = values[idx];\r\n\t\t\t\tif (value) {\r\n\t\t\t\tvar property = value.reason;\r\n\t\t\t\t\tif (property) {\r\n\t\t\t\t\t\tresult[property] = result[property] + value.amount;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n}"
    },
    "stock_per_day_store": {
      "map": "  function(doc) {\r\n    if (doc.entityTypeName == 'StockHistory') {\r\n        var d = new Date(doc.createdAtLocalDate);\r\n        emit([doc.productId, doc.storeId, d.getFullYear(), d.getMonth() + 1, d.getDate(), d.getHours()], {\r\n            reason: doc.reason,\r\n            amount: doc.value\r\n        });\r\n    }\r\n}",
      "reduce": "function (keys, values, rereduce) {\r\n\tfunction sumField(arr, field) {\r\n\t\treturn arr.reduce(function (prev, cur) {\r\n\t\t\treturn prev + cur[field];\r\n\t\t},\r\n\t\t0);\r\n\t}\r\n\tif (rereduce) {\r\n\t\treturn {\r\n\t\t\tpurchase: sumField(values, \"Purchase\"),\r\n\t\t\tinitialValue: sumField(values, \"InitialValue\"),\r\n\t\t\tnewStock: sumField(values, \"NewStock\"),\r\n\t\t\treturned: sumField(values, \"Return\"),\r\n\t\t\ttransfer: sumField(values, \"Transfer\"),\r\n\t\t\tadjustment: sumField(values, \"Adjustment\"),\r\n\t\t\tinternalUse: sumField(values, \"InternalUse\"),\r\n\t\t\tdamaged: sumField(values, \"Damaged\"),\r\n\t\t\toutOfDate: sumField(values, \"OutOfDate\"),\r\n\t\t\tother: sumField(values, \"Other\")\r\n\t\t};\r\n\r\n\t}else {\r\n\t\tvar result = {\r\n\t\t\tPurchase: 0,\r\n\t\t\tInitialValue: 0,\r\n\t\t\tNewStock: 0,\r\n\t\t\tReturn: 0,\r\n\t\t\tTransfer: 0,\r\n\t\t\tAdjustment: 0,\r\n\t\t\tInternalUse: 0,\r\n\t\t\tDamaged: 0,\r\n\t\t\tOutOfDate: 0,\r\n\t\t\tOther: 0\r\n\t\t}\r\n\t\tif (values) {\r\n\t\t\tfor (var idx in values) {\r\n\t\t\tvar value = values[idx];\r\n\t\t\t\tif (value) {\r\n\t\t\t\tvar property = value.reason;\r\n\t\t\t\t\tif (property) {\r\n\t\t\t\t\t\tresult[property] = result[property] + value.amount;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n}"
    },
    "stock_per_day": {
      "map": "function(doc) {\r\n    if (doc.entityTypeName == 'StockHistory') {\r\n        var d = new Date(doc.createdAtLocalDate);\r\n        emit([doc.productId, d.getFullYear(), d.getMonth() + 1, d.getDate(), d.getHours()], {\r\n            reason: doc.reason,\r\n            amount: doc.value\r\n        });\r\n    }\r\n}",
      "reduce": "function (keys, values, rereduce) {\r\n\tfunction sumField(arr, field) {\r\n\t\treturn arr.reduce(function (prev, cur) {\r\n\t\t\treturn prev + cur[field];\r\n\t\t},\r\n\t\t0);\r\n\t}\r\n\tif (rereduce) {\r\n\t\treturn {\r\n\t\t\tpurchase: sumField(values, \"Purchase\"),\r\n\t\t\tinitialValue: sumField(values, \"InitialValue\"),\r\n\t\t\tnewStock: sumField(values, \"NewStock\"),\r\n\t\t\treturned: sumField(values, \"Return\"),\r\n\t\t\ttransfer: sumField(values, \"Transfer\"),\r\n\t\t\tadjustment: sumField(values, \"Adjustment\"),\r\n\t\t\tinternalUse: sumField(values, \"InternalUse\"),\r\n\t\t\tdamaged: sumField(values, \"Damaged\"),\r\n\t\t\toutOfDate: sumField(values, \"OutOfDate\"),\r\n\t\t\tother: sumField(values, \"Other\")\r\n\t\t};\r\n\r\n\t}else {\r\n\t\tvar result = {\r\n\t\t\tPurchase: 0,\r\n\t\t\tInitialValue: 0,\r\n\t\t\tNewStock: 0,\r\n\t\t\tReturn: 0,\r\n\t\t\tTransfer: 0,\r\n\t\t\tAdjustment: 0,\r\n\t\t\tInternalUse: 0,\r\n\t\t\tDamaged: 0,\r\n\t\t\tOutOfDate: 0,\r\n\t\t\tOther: 0\r\n\t\t}\r\n\t\tif (values) {\r\n\t\t\tfor (var idx in values) {\r\n\t\t\tvar value = values[idx];\r\n\t\t\t\tif (value) {\r\n\t\t\t\tvar property = value.reason;\r\n\t\t\t\t\tif (property) {\r\n\t\t\t\t\t\tresult[property] = result[property] + value.amount;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n}"
    }
  },
  "language": "javascript"
}
]
}